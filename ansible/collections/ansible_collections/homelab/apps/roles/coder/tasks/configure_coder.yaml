- name: Query Coder for existing first User
  ansible.builtin.uri:
    url: "{{ _coder_fqdn }}/api/v2/users/first"
    status_code: [200, 404]
    return_content: true
    headers:
      Accept: application/json
  register: _coder_first_user_response

- name: Set first user fact
  ansible.builtin.set_fact:
    _coder_first_user: "{{ _coder_first_user_response.status == 200 }}"
    # 404 is a valid response only if the message contains a field message with the content
    # "The initial user has not been created!"
    _coder_is_first_user_valid_response: "{{ _coder_first_user_response.status == 200 or ( _coder_first_user_response.status == 404 and 'created' in _coder_first_user_response.json.message ) }}"

- name: Abort if the first user response is not valid
  ansible.builtin.fail:
    msg: "Error: the query to /api/v2/users/first returned an invalid response"
  when: not _coder_is_first_user_valid_response

- name: Create first user and API token
  when: not _coder_first_user

  block:
    - name: Create first user
      ansible.builtin.uri:
        url: "{{ _coder_fqdn }}/api/v2/users/first"
        method: POST
        status_code: 201
        body: "{{ lookup('ansible.builtin.template', 'create-first-user-body-request.json.j2') }}"
        body_format: json
        headers:
          Accept: application/json
          Content-Type: application/json

    - name: Login to coder
      ansible.builtin.uri:
        url: "{{ _coder_fqdn }}/api/v2/users/login"
        method: POST
        status_code: 201
        body: "{{ lookup('ansible.builtin.template', 'login-body-request.json.j2') }}"
        body_format: json
        return_content: true
        headers:
          Accept: application/json
          Content-Type: application/json
      register: _coder_login_response

    - name: Set Coder session token
      ansible.builtin.set_fact:
        _coder_session_token: "{{ _coder_login_response.json.session_token }}"

    #curl -X POST http://coder-server:8080/api/v2/users/{user}/keys/tokens \
    #  -H 'Content-Type: application/json' \
    #  -H 'Accept: application/json' \
    #  -H 'Coder-Session-Token: API_KEY'

    - name: Generate API key
      ansible.builtin.uri:
        url: "{{ _coder_fqdn }}/api/v2/users/admin/keys/tokens"
        method: POST
        status_code: 201
        return_content: true
        body_format: json
        body: "{{ lookup('ansible.builtin.template', 'create-api-key-body-request.json.j2') }}"
        headers:
          Accept: application/json
          Content-Type: application/json
          Coder-Session-Token: "{{ _coder_session_token }}"
      register: _coder_api_key_response

    # Save the token on the disk for future use
    - name: Save API key
      ansible.builtin.copy:
        content: "{{ _coder_api_key_response.json.key }}"
        dest: "{{ coder_conf_dir }}/coder_admin_api_token"
        owner: root
        group: root
        mode: "0400"

- name: Read Coder API token
  ansible.builtin.slurp:
    src: "{{ coder_conf_dir }}/coder_admin_api_token"
  register: _coder_api_token_file_content

- name: Set Coder API token
  ansible.builtin.set_fact:
    _coder_api_token: "{{ _coder_api_token_file_content['content'] | b64decode }}"
