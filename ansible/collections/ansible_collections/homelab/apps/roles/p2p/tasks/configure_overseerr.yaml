---
# There is no easy way to fully initialize the server since a login with a Plex account is required
# If the first login has not happend yet, the script will pause to let the user
# complete the first login

# This workaround is needed because the current release of Bitwarden Secret Manager is bugged and
# two variables cannot be used at the same time.
# https://community.bitwarden.com/t/bitwarden-lookup-plugin-for-ansible-causes-panick-errors-and-a-worker-was-found-in-a-dead-state/64579/7

- name: Bitwarden workaround for p2p_smtp_sender
  ansible.builtin.set_fact:
    p2p_smtp_sender: "{{ p2p_smtp_sender }}"

- name: Bitwarden workaround for p2p_requestor_user_email
  ansible.builtin.set_fact:
    p2p_requestor_user_email: "{{ p2p_requestor_user_email }}"

- name: Bitwarden workaround for p2p_smtp_api_key
  ansible.builtin.set_fact:
    p2p_smtp_api_key: "{{ p2p_smtp_api_key }}"

- name: Retrieve auth me from Overseerr
  ansible.builtin.uri:
    url: "{{ overseerr_server_url }}/api/v1/auth/me"
    method: GET
    headers:
      Accept: application/json
      X-Api-Key: "{{ overseerr_api_key }}"
    status_code: [200, 403]
  register: overseerr_authme_api_response
  until: overseerr_authme_api_response.status == 200 or overseerr_authme_api_response.status == 403
  retries: 60 # 10 seconds
  delay: 1

- name: Set is_first_login_completed
  ansible.builtin.set_fact:
    is_first_login_completed: "{{ overseerr_authme_api_response.status == 200 }}"

- name: Let user complete first login
  when: not is_first_login_completed
  ansible.builtin.pause:
    prompt: Open overseerr.{{ internal_domain }} and complete login. When finished press enter

- name: Configure Plex in Overseerr
  ansible.builtin.uri:
    url: "{{ overseerr_server_url }}/api/v1/settings/plex"
    method: POST
    headers:
      Accept: application/json
      Content-Type: application/json
      X-Api-Key: "{{ overseerr_api_key }}"
    status_code: [200]
    body: "{{ lookup('ansible.builtin.template', 'overseerr-configure-plex-body-request.json.j2') }}"
    body_format: json

- name: Retrieve Sonarr settings from Overseerr
  ansible.builtin.uri:
    url: "{{ overseerr_server_url }}/api/v1/settings/sonarr"
    method: GET
    headers:
      Accept: application/json
      X-Api-Key: "{{ overseerr_api_key }}"
    status_code: [200]
  register: overseerr_sonarr_settings_api_response

- name: Set sonarr_count fact
  ansible.builtin.set_fact:
    sonarr_count: "{{ overseerr_sonarr_settings_api_response.json | to_json | from_json | community.general.json_query(jsme_query) }}"
  vars:
    jsme_query: "[?contains(name, '{{ sonarr_fqdn }}' )] | length(@)"

- name: Set sonarr_exists fact
  ansible.builtin.set_fact:
    sonarr_exists: "{{ sonarr_count != '0' }}"

- name: Configure Sonarr in Overseerr if missing
  when: not sonarr_exists
  block:
    - name: Retrieve Sonarr quality profiles
      ansible.builtin.uri:
        url: "{{ sonarr_server_url }}/api/v3/qualityprofile"
        method: GET
        headers:
          Accept: application/json
          X-Api-Key: "{{ sonarr_api_key }}"
        status_code: [200]
      register: sonarr_quality_profiles_api_response
      # Is Sonarr is restarted, it might take a few seconds to become responsive
      until: sonarr_quality_profiles_api_response.status == 200
      retries: 10 # 10 seconds
      delay: 1

    - name: Set quality_profiles_high_quality_ita_count fact
      ansible.builtin.set_fact:
        high_quality_ita_profile: "{{ sonarr_quality_profiles_api_response.json | to_json | from_json | community.general.json_query(jsme_query) | first }}"
      vars:
        jsme_query: "[?contains(name, 'HighQuality-ITA' )]"

    - name: Set Sonarr profile facts
      ansible.builtin.set_fact:
        sonar_qualityprofile_name: "{{ high_quality_ita_profile | community.general.json_query('name') }}"
        sonar_qualityprofile_id: "{{ high_quality_ita_profile | community.general.json_query('id') }}"

    - name: Configure Sonarr in Overseerr
      ansible.builtin.uri:
        url: "{{ overseerr_server_url }}/api/v1/settings/sonarr"
        method: POST
        headers:
          Accept: application/json
          Content-Type: application/json
          X-Api-Key: "{{ overseerr_api_key }}"
        status_code: [201]
        body: "{{ lookup('ansible.builtin.template', 'overseerr-add-sonarr-body-request.json.j2') }}"
        body_format: json

- name: Retrieve Radarr settings from Overseerr
  ansible.builtin.uri:
    url: "{{ overseerr_server_url }}/api/v1/settings/radarr"
    method: GET
    headers:
      Accept: application/json
      X-Api-Key: "{{ overseerr_api_key }}"
    status_code: [200]
  register: overseerr_radarr_settings_api_response

- name: Set radarr_count fact
  ansible.builtin.set_fact:
    _p2p_radarr_count: "{{ overseerr_radarr_settings_api_response.json | to_json | from_json | community.general.json_query(jsme_query) }}"
  vars:
    jsme_query: "[?contains(name, '{{ _p2p_radarr_fqdn }}' )] | length(@)"

- name: Set radarr_exists fact
  ansible.builtin.set_fact:
    _p2p_radarr_exists: "{{ _p2p_radarr_count != '0' }}"

- name: Configure Radarr in Overseerr
  when: not _p2p_radarr_exists
  ansible.builtin.uri:
    url: "{{ overseerr_server_url }}/api/v1/settings/radarr"
    method: POST
    headers:
      Accept: application/json
      Content-Type: application/json
      X-Api-Key: "{{ overseerr_api_key }}"
    status_code: [201]
    body: "{{ lookup('ansible.builtin.template', 'overseerr-add-radarr-body-request.json.j2') }}"
    body_format: json

- name: Configure SMTP
  ansible.builtin.uri:
    url: "{{ overseerr_server_url }}/api/v1/settings/notifications/email"
    method: POST
    headers:
      Accept: application/json
      Content-Type: application/json
      X-Api-Key: "{{ overseerr_api_key }}"
    status_code: [200]
    body: "{{ lookup('ansible.builtin.template', 'overseerr-configure-smtp-body-request.json.j2') }}"
    body_format: json

# The call assumes that there are less than 100 users in the system
- name: Retrieve users
  ansible.builtin.uri:
    url: "{{ overseerr_server_url }}/api/v1/user?take=100&skip=0"
    method: GET
    headers:
      Accept: application/json
      X-Api-Key: "{{ overseerr_api_key }}"
    status_code: [200]
  register: overseerr_users_api_response

- name: Set user_with_email_count fact
  ansible.builtin.set_fact:
    __p2p_user_with_email_count: "{{ overseerr_users_api_response.json | to_json | from_json | community.general.json_query(jsme_query) }}"
  vars:
    jsme_query: "results | [?contains(email, '{{ p2p_requestor_user_email }}' )] | length(@)"

- name: Set p2p_user_with_email_exists fact
  ansible.builtin.set_fact:
    __p2p_user_with_email_exists: "{{ __p2p_user_with_email_count != '0' }}"

- name: Initialize user
  when: not __p2p_user_with_email_exists
  block:
    - name: Create user
      ansible.builtin.uri:
        url: "{{ overseerr_server_url }}/api/v1/user"
        method: POST
        headers:
          Accept: application/json
          Content-Type: application/json
          X-Api-Key: "{{ overseerr_api_key }}"
        status_code: [201]
        body: "{{ lookup('ansible.builtin.template', 'overseerr-add-user-body-request.json.j2') }}"
        body_format: json
      register: __p2p_overseerr_new_user_api_response

    - name: Set __p2p_overseerr_new_user_id
      ansible.builtin.set_fact:
        __p2p_overseerr_new_user_id: "{{ __p2p_overseerr_new_user_api_response.json | to_json | from_json | community.general.json_query(jsme_query) }}"
      vars:
        jsme_query: "id"

    - name: Configure user
      ansible.builtin.uri:
        url: "{{ overseerr_server_url }}/api/v1/user/{{ __p2p_overseerr_new_user_id }}/settings/main"
        method: POST
        headers:
          Accept: application/json
          Content-Type: application/json
          X-Api-Key: "{{ overseerr_api_key }}"
        status_code: [200]
        body: "{{ lookup('ansible.builtin.template', 'overseerr-configure-user-body-request.json.j2') }}"
        body_format: json
