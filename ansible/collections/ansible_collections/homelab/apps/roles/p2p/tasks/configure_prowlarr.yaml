---
- name: Create Bitmagnet indexer
  devopsarr.prowlarr.prowlarr_indexer:
    prowlarr_url: "{{ _p2p_prowlarr_server_url }}"
    prowlarr_api_key: "{{ prowlarr_api_key }}"
    name: "bitmagnet"
    app_profile_id: 1
    enable: true
    priority: 25
    config_contract: "TorznabSettings"
    implementation: "Torznab"
    protocol: "torrent"
    fields:
      - name: "baseUrl"
        value: "https://bitmagnet.{{ internal_domain }}/torznab"
      - name: "apiPath"
        value: "/api"
      - name: "apiKey"
      - name: "baseSettings.limitsUnit"
        value: 0
    tags: []

- name: Create a flaresolverr tag
  devopsarr.prowlarr.prowlarr_tag:
    prowlarr_url: "{{ _p2p_prowlarr_server_url }}"
    prowlarr_api_key: "{{ prowlarr_api_key }}"
    # The indexer must specify this tag to use the proxy
    label: flaresolverr
  register: _p2p_flaresolverr_tag_response

- name: Create FlareSolverr proxy
  devopsarr.prowlarr.prowlarr_indexer_proxy:
    prowlarr_url: "{{ _p2p_prowlarr_server_url }}"
    prowlarr_api_key: "{{ prowlarr_api_key }}"
    name: FlareSolverr
    config_contract: FlareSolverrSettings
    implementation: FlareSolverr
    fields:
      - name: host
        value: "http://{{_p2p_flaresolverr_fqdn}}"
    tags: [ "{{ _p2p_flaresolverr_tag_response.id }}" ]

- name: Retrieve Prowlarr apps
  ansible.builtin.uri:
    url: "{{ _p2p_prowlarr_server_url }}/api/v1/applications"
    method: GET
    headers:
      Accept: application/json
      X-Api-Key: "{{ prowlarr_api_key }}"
    status_code: [200]
  register: prowlarr_apps_api_response

- name: Set sonarr_url
  ansible.builtin.set_fact:
    sonarr_url: sonarr.{{ internal_domain }}

- name: Set sonarr_apps_count fact
  ansible.builtin.set_fact:
    sonarr_apps_count: "{{ prowlarr_apps_api_response.json | to_json | from_json | community.general.json_query(jsme_query) }}"
  vars:
    jsme_query: "[?contains(name, '{{ sonarr_url }}' )] | length(@)"

- name: Set sonar_sync_exists fact
  ansible.builtin.set_fact:
    sonar_sync_exists: "{{ sonarr_apps_count != '0' }}"

- name: Add Sonarr sync
  when: not sonar_sync_exists
  ansible.builtin.uri:
    url: "{{ _p2p_prowlarr_server_url }}/api/v1/applications"
    method: POST
    headers:
      Accept: application/json
      Content-Type: application/json
      X-Api-Key: "{{ prowlarr_api_key }}"
    status_code: [201]
    body: "{{ lookup('ansible.builtin.template', 'prowlarr-add-sonarr-body-request.json.j2') }}"
    body_format: json

- name: Set radarr_url
  ansible.builtin.set_fact:
    radarr_url: radarr.{{ internal_domain }}

- name: Set radarr_apps_count fact
  ansible.builtin.set_fact:
    radarr_apps_count: "{{ prowlarr_apps_api_response.json | to_json | from_json | community.general.json_query(jsme_query) }}"
  vars:
    jsme_query: "[?contains(name, '{{ radarr_url }}' )] | length(@)"

- name: Set radarr_sync_exists fact
  ansible.builtin.set_fact:
    radarr_sync_exists: "{{ radarr_apps_count != '0' }}"

- name: Add radarr sync
  when: not radarr_sync_exists
  ansible.builtin.uri:
    url: "{{ _p2p_prowlarr_server_url }}/api/v1/applications"
    method: POST
    headers:
      Accept: application/json
      Content-Type: application/json
      X-Api-Key: "{{ prowlarr_api_key }}"
    status_code: [201]
    body: "{{ lookup('ansible.builtin.template', 'prowlarr-add-radarr-body-request.json.j2') }}"
    body_format: json
