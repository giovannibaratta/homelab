- name: Add {{ traefik_container_user }} user
  ansible.builtin.user:
    name: "{{ traefik_container_user }}"
    comment: User used to run Traefik
    create_home: no
    shell: /usr/sbin/nologin
  register: traefik_container_user_result

- name: Create Traefik directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0700
    owner: "{{ traefik_container_user }}"
    group: "{{ traefik_container_user }}"
    recurse: true
  with_items:
    - /app/traefik/conf
    - /app/traefik/work
    - /app/traefik/work/certificates

- name: Copy traefik.yaml configuration
  copy:
    content: |
      global:
        checkNewVersion: true
        sendAnonymousUsage: false

      entryPoints:
        web:
          address: :80

        websecure:
          address: :443

      api:
        # Dashboard is served on port 8080
        insecure: true
        dashboard: true

      providers:
        docker:
          exposedByDefault: false
          # This is a security risk, it should be better
          # to expose and use a TCP socket
          endpoint: "unix:///var/run/docker.sock"

      log:
        level: INFO

      certificatesResolvers:
        letsencrypt:
          acme:
            email: {{ acme_email }}
            storage: /app/traefik/work/certificates/acme.json
            dnsChallenge:
              provider: desec
              delayBeforeCheck: 60

    dest: /app/traefik/conf/traefik.yaml
    mode: 0600
    owner: "{{ traefik_container_user }}"
    group: "{{ traefik_container_user }}"
  notify: Restart Traefik service

- name: Copy traefik.env configuration
  copy:
    content: |
      DESEC_TOKEN={{ desec_token }}

    dest: /app/traefik/conf/traefik.env
    mode: 0600
    owner: "{{ traefik_container_user }}"
    group: "{{ traefik_container_user }}"
  notify: Restart Traefik service

- name: Get the group ID of the 'containers' group
  shell: |
    getent group containers | cut -d: -f3
  register: containers_group_result

# The gidmap is needed to give traefik access to the Docker socket.
- name: Create traefik.service file
  copy:
    content: |
      [Unit]
      Description=Podman container-traefik.service
      Documentation=man:podman-generate-systemd(1)
      Wants=network-online.target
      After=network-online.target
      RequiresMountsFor=%t/containers

      [Service]
      Environment=PODMAN_SYSTEMD_UNIT=%n
      Restart=on-failure
      TimeoutStopSec=70
      ExecStart=/usr/bin/podman run \
              --cidfile=%t/%n.ctr-id \
              --cgroups=no-conmon \
              --rm \
              --sdnotify=conmon \
              --replace \
              -d \
              --name traefik \
              --env-file=/app/traefik/conf/traefik.env \
              -v /app/traefik/conf/traefik.yaml:/etc/traefik/traefik.yml:ro \
              -v /app/traefik/work:/app/traefik/work \
              -v /var/run/docker.sock:/var/run/docker.sock:ro \
              -p 172.16.255.254:80:80/tcp \
              -p 172.16.255.254:8080:8080/tcp \
              -p 172.16.255.254:443:443/tcp \
              --uidmap="0:{{ traefik_container_user_result.uid }}:1" \
              --uidmap="1:4000000000:100000" \
              --gidmap="0:{{ containers_group_result.stdout }}:1" \
              --gidmap="1:4000000000:100000" \
              docker.io/traefik:v3.0.3
      ExecStop=/usr/bin/podman stop \
              --ignore -t 10 \
              --cidfile=%t/%n.ctr-id
      ExecStopPost=/usr/bin/podman rm \
              -f \
              --ignore -t 10 \
              --cidfile=%t/%n.ctr-id
      Type=notify
      NotifyAccess=all

      [Install]
      WantedBy=default.target
    dest: /etc/systemd/system/traefik.service
    mode: 0644
  register: traefik_service_unit

- name: Reload systemd daemons
  systemd_service:
    daemon_reload: yes
  when: traefik_service_unit.changed

- name: Enable and start traefik service
  systemd_service:
    name: traefik.service
    enabled: yes
    state: started
