---
- name: Add user {{ traefik_container_user }}
  ansible.builtin.user:
    name: "{{ traefik_container_user }}"
    comment: User used to run Traefik
    create_home: false
    shell: /usr/sbin/nologin
  register: traefik_container_user_result

- name: Add user {{ ingress_socket_proxy_container_user }}
  ansible.builtin.user:
    name: "{{ ingress_socket_proxy_container_user }}"
    comment: User used to run Docker socket proxy for Traefik
    create_home: false
    shell: /usr/sbin/nologin
    groups: docker
    append: true
  register: ingress_socket_proxy_container_user_result

- name: Create Traefik directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0700"
    owner: "{{ traefik_container_user }}"
    group: "{{ traefik_container_user }}"
  with_items:
    - /app/traefik/conf
    - /app/traefik/conf/dynamic
    - /app/traefik/work
    - /app/traefik/work/certificates

- name: Copy traefik.yaml configuration
  ansible.builtin.template:
    src: traefik.yaml.j2

    dest: /app/traefik/conf/traefik.yaml
    mode: "0600"
    owner: "{{ traefik_container_user }}"
    group: "{{ traefik_container_user }}"
    backup: yes
  notify: Restart Traefik service

- name: Copy traefik.env configuration
  ansible.builtin.template:
    src: traefik.env.j2

    dest: /app/traefik/conf/traefik.env
    mode: "0600"
    owner: "{{ traefik_container_user }}"
    group: "{{ traefik_container_user }}"
    backup: yes
  notify: Restart Traefik service

- name: Copy traefik middleware configuration
  ansible.builtin.template:
    src: middleware.yaml.j2

    dest: /app/traefik/conf/dynamic/middleware.yaml
    mode: "0600"
    owner: "{{ traefik_container_user }}"
    group: "{{ traefik_container_user }}"
    backup: yes
  notify: Restart Traefik service

- name: Get the group ID of the 'containers' group
  ansible.builtin.getent:
    database: group
    key: containers
    split: ':'

- name: Create Traefik network
  containers.podman.podman_network:
    name: traefik
    state: present
    # Enable DNS resolution based on container names
    disable_dns: false
    dns:
      - "{{ internal_gateway }}"
    driver: bridge
    force: true
    recreate: true
    # Need to be reachable by other services
    internal: false
    interface_name: podman-traefik
    opt:
      isolate: true

- name: Create WAF network
  containers.podman.podman_network:
    name: waf-network
    state: present

- name: Create dummy backend container
  containers.podman.podman_container:
    name: waf-dummy
    state: quadlet
    image: docker.io/traefik/whoami:latest

    recreate: true
    network: waf-network

    uidmap:
      - 0:4000000000:100000
    gidmap:
      - 0:4000000000:100000

    quadlet_options:
      - |
        [Install]
        WantedBy=default.target
  notify:
    - Reload systemd daemons for ingress role
    - Restart WAF dummy service

- name: Create Docker Socket Proxy (Read-Only) for Traefik
  containers.podman.podman_container:
    name: traefik-socket-proxy
    state: quadlet
    image: lscr.io/linuxserver/socket-proxy:{{ ingress_socket_proxy_version }}
    recreate: true
    network: traefik

    ports:
      - "40375:2375"  # Map internal port 2375 to host port 40375

    env:
      POST: 0
      EVENTS: 1
      PING: 1
      CONTAINERS: 1
      LOGS: 0
      INFO: 1
      LOG_LEVEL: debug

    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

    uidmap:
      - 0:{{ ingress_socket_proxy_container_user_result.uid }}:1
      - 1:4000000000:100000

    # The gidmap is needed to give socket proxy access to the Docker socket.
    gidmap:
      - 0:{{ ansible_facts.getent_group.containers[1] }}:1
      - 1:4000000000:100000

    quadlet_options:
      - |
        [Install]
        WantedBy=default.target
        [Unit]
        StartLimitIntervalSec=0
        [Service]
        Restart=always
        RestartSec=60s
  notify:
    - Reload systemd daemons for ingress role
    - Restart traefik-socket-proxy service

- name: Trigger Handlers for traefik-socket-proxy
  ansible.builtin.meta: flush_handlers

- name: Create ModSecurity WAF Quadlet
  containers.podman.podman_container:
    name: modsecurity-waf
    state: quadlet
    image: docker.io/owasp/modsecurity-crs:{{ ingress_waf_version }}

    ports:
      - "18080:8080"  # Expose ModSecurity on port 18080 for Traefik plugin

    env:
      PARANOIA: "{{ ingress_waf_paranoia_level }}"
      ANOMALY_INBOUND: "{{ ingress_waf_anomaly_inbound }}"
      ANOMALY_OUTBOUND: "{{ ingress_waf_anomaly_outbound }}"
      BACKEND: "http://waf-dummy"
      REPORTING_LEVEL: "{{ ingress_waf_reporting_level }}"
      MODSEC_AUDIT_LOG_FORMAT: "{{ ingress_waf_audit_log_format }}"
      MODSEC_RULE_ENGINE: "{{ ingress_waf_rule_engine }}"
      PORT: "8080"
      SSL_ENGINE: "off"  # Disable SSL in ModSecurity, Traefik handles TLS

    recreate: true
    network: waf-network

    uidmap:
      - 0:4000000000:100000
    gidmap:
      - 0:4000000000:100000

    quadlet_options:
      - |
        [Install]
        WantedBy=default.target
  notify:
    - Reload systemd daemons for ingress role
    - Restart ModSecurity WAF service

- name: Trigger Handlers for ModSecurity WAF
  ansible.builtin.meta: flush_handlers

- name: Create Traefik Quadlet
  containers.podman.podman_container:
    name: traefik
    state: quadlet
    image: docker.io/traefik:{{ ingress_traefik_version }}

    env_file: /app/traefik/conf/traefik.env
    recreate: true
    network: host

    volumes:
      - "/app/traefik/conf/traefik.yaml:/etc/traefik/traefik.yml:ro"
      - "/app/traefik/conf/dynamic:/etc/traefik/dynamic:ro"
      - "/app/traefik/work:/app/traefik/work"

    uidmap:
      - 0:{{ traefik_container_user_result.uid }}:1
      - 1:4000000000:100000

    gidmap:
      - 0:{{ traefik_container_user_result.group }}:1
      - 1:4000000000:100000

    quadlet_options:
      - |
        [Install]
        WantedBy=default.target
        [Unit]
        Requires=traefik-socket-proxy.service
  notify:
    - Reload systemd daemons for ingress role
    - Restart Traefik service

- name: Trigger Handlers for Traefik
  ansible.builtin.meta: flush_handlers

- name: Enable and start waf-dummy service
  ansible.builtin.systemd_service:
    name: waf-dummy.service
    enabled: true
    state: started

- name: Enable and start modsecurity-waf service
  ansible.builtin.systemd_service:
    name: modsecurity-waf.service
    enabled: true
    state: started

- name: Enable and start traefik-socket-proxy service
  ansible.builtin.systemd_service:
    name: traefik-socket-proxy.service
    enabled: true
    state: started

- name: Enable and start traefik service
  ansible.builtin.systemd_service:
    name: traefik.service
    enabled: true
    state: started
