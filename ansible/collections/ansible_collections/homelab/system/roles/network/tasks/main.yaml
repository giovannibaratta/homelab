---
# Disabled until Bitwarden Secret manager will fix the bug to access
# multiple variables in the same block.
# https://community.bitwarden.com/t/bitwarden-lookup-plugin-for-ansible-causes-panick-errors-and-a-worker-was-found-in-a-dead-state/64579/7
# - name: Check required variables
#   fail:
#     msg: >
#       The variables 'wan_interface', 'pppoe_username', 'pppoe_password', 'internal_interface',
#       'internal_network_cidr', 'internal_gateway', 'internal_network_dhcp_start',
#       'internal_network_dhcp_end' are required.
#   when: >
#     wan_interface == '' or
#     internal_interface == '' or
#     pppoe_username == '' or
#     pppoe_password == '' or
#     internal_network == '' or
#     internal_network_netmask == '' or
#     internal_gateway == '' or
#     internal_network_dhcp_start == '' or
#     internal_network_dhcp_end == ''

- name: Ensure systemd-networkd-wait-online waits for the right interface
  ansible.builtin.lineinfile:
    path: /usr/lib/systemd/system/systemd-networkd-wait-online.service
    regexp: ^ExecStart.+
    line: /usr/lib/systemd/systemd-networkd-wait-online --interface={{ internal_interface }}

- name: Configure DNS
  ansible.builtin.import_tasks: configure-dns.yaml

- name: Create VLAN config
  ansible.builtin.copy:
    content: |
      [connection]
      id=vlan
      type=vlan
      autoconnect=true
      autoconnect-retries=0

      [vlan]
      id=835
      parent={{ wan_interface }}
      flags=1

      [ipv4]
      method=disabled

      [ipv6]
      method=ignore
      addr-gen-mode=default

      [ethernet]

      [proxy]
    dest: /etc/NetworkManager/system-connections/vlan.nmconnection
    mode: "0600"

- name: Create PPPOE connection config
  ansible.builtin.copy:
    content: |
      [connection]
      id=pppoe-ftth
      type=pppoe
      interface-name=ftth
      autoconnect=true
      autoconnect-retries=0

      [ipv4]
      method=auto

      [ipv6]
      method=auto
      addr-gen-mode=default

      [ethernet]

      [pppoe]
      parent={{ wan_interface }}.835
      password="{{ pppoe_password }}"
      username="{{ pppoe_username }}"

      [proxy]
    dest: /etc/NetworkManager/system-connections/pppoe.nmconnection
    mode: "0600"

# Required for VLAN tagging
- name: Load kernel module 8021q
  community.general.modprobe:
    name: 8021q
    state: present

- name: Create /etc/modules-load.d/8021q.conf
  ansible.builtin.copy:
    content: 8021q
    dest: /etc/modules-load.d/8021q.conf
    mode: "0644"

- name: Install iproute2
  ansible.builtin.apt:
    name: iproute2
    state: present
    update_cache: true

- name: Install network-manager
  ansible.builtin.apt:
    name: network-manager
    state: present
    update_cache: true

- name: Configure Network Manager
  ansible.builtin.copy:
    content: |
      [main]
      plugins=ifupdown,keyfile
      monitor-connection-files=yes

      [ifupdown]
      managed=false

      [device]
      wifi.scan-rand-mac-address=no
    dest: /etc/NetworkManager/NetworkManager.conf
    mode: "0644"
  notify:
    - Restart NetworkManager service

# Enable IP forwarding
- name: Configure routing table
  ansible.builtin.copy:
    content: |
      net.ipv4.ip_forward=1
    dest: /etc/sysctl.d/20-ip-forward.conf
    mode: "0644"

- name: Enable IP forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present

- name: Install nftables
  ansible.builtin.apt:
    name: nftables
    state: present
    update_cache: true

- name: Install conntrack
  ansible.builtin.apt:
    name: conntrack
    state: present
    update_cache: true

- name: Create /app/nftables-geoip
  ansible.builtin.file:
    path: /app/nftables-geoip
    state: directory
    mode: "0700"

- name: Create /app/nftables-geoip/ip-lists
  ansible.builtin.file:
    path: /app/nftables-geoip/ip-lists
    state: directory
    mode: "0700"

- name: Clone nftables-geoip
  ansible.builtin.git:
    repo: https://github.com/pvxe/nftables-geoip.git
    dest: /app/nftables-geoip/repo
    single_branch: true
    version: master
    force: true

- name: Generate list of allowed IPs
  ansible.builtin.shell: |
    /app/nftables-geoip/repo/nft_geoip.py --download -c es,fr,pt,it,de,ie,gb,ch,se,no --output-dir /app/nftables-geoip/ip-lists --file-location /app/nftables-geoip/repo/location.csv

- name: Ensture that nftables start after file system has been mounted
  ansible.builtin.template:
    src: nftables.service.override.conf.j2
    dest: "/etc/systemd/system/nftables.service.d/override.conf"
    mode: "0600"

- name: Reload systemd daemons for nftables
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: Configure NAT and firewall rules with nftables
  ansible.builtin.blockinfile:
    path: /etc/nftables.conf
    backup: true
    create: true
    insertbefore: EOF
    block: |
      # Clean existing table and preserve docker tables
      table ip custom_nat
      delete table ip custom_nat

      table ip firewall
      delete table ip firewall

      table ip mss
      delete table ip mss

      # The source IP for masquerading will be automagically infered based on the
      # output interface
      # table ip affects only IPv4
      table ip custom_nat {
        chain nat_prerouting {
          type nat hook prerouting priority 0; policy accept;
          # Forward external traffic to host ingress (Traefik)
          iifname { ftth } tcp dport { http } dnat to 172.16.255.254:9080
          iifname { ftth } tcp dport { https } dnat to 172.16.255.254:9443
          # Forward external traffic for STUN/TURN
          iifname { ftth } udp dport { 3478 } dnat to 172.16.255.254:3478
          iifname { ftth } tcp dport { 5349 } dnat to 172.16.255.254:5349
          # Forward local traffic to host ingress (Traefik)
          ip daddr 172.16.255.254 tcp dport { http } dnat to 172.16.255.254:8081
          ip daddr 172.16.255.254 tcp dport { https } dnat to 172.16.255.254:8443
          # Forward internal DNS over TLS/QUIC traffic to Traefik
          iifname { {{ internal_interface }} } tcp dport { 853 } dnat to 172.16.255.254:8853
          iifname { {{ internal_interface }} } udp dport { 853 } dnat to 172.16.255.254:8854
        }

        # for all packets to WAN, after routing,
        # replace source address with primary IP of WAN interface
        chain nat_postrouting {
          type nat hook postrouting priority 100; policy accept;
          oifname ftth masquerade # ftth is the interface name
        }

        # port-forward traffic originated by the router itself
        chain nat_output {
          type nat hook output priority filter; policy accept;
          ip saddr 172.16.255.254 ip daddr 172.16.255.254 tcp dport { http } redirect to 8081
          ip saddr 172.16.255.254 ip daddr 172.16.255.254 tcp dport { https } redirect to 8443
        }
      }

      # Since we are using PPPOE, the packet size of TCP must be adjusted
      # Not all client can adjusted the max MTU and TCP MSS, therefore
      # we do it at the router level
      table ip mss {
        chain mss_forward {
          type filter hook forward priority filter; policy accept;
          tcp flags syn tcp option maxseg size set rt mtu
        }
      }

      table ip firewall {

        include "/app/nftables-geoip/ip-lists/geoip-def-all.nft"
        include "/app/nftables-geoip/ip-lists/geoip-ipv4-interesting.nft"
        define ALLOWED_COUNTRIES = { $IT, $IE, $US }

        chain dispatcher {
          type filter hook input priority 1000;
          iif lo accept comment "always accept loopback"
          iifname ftth jump public_traffic # ftth is the interface name
          iifname {{ internal_interface }} jump internal_traffic
          iifname "podman*" jump container_traffic
          log prefix "Unmatched interface "
          reject
        }

        # Drop all traffic from internet if not initiated from internal network
        chain public_traffic {
          meta mark set ip saddr map @geoip4
          ct state {established,related} accept
          ct state invalid log prefix "Invalid state " drop
          # Filter packet not coming from allowed countries checking the meta mark
          # set by geoip4. Geoblocking must be performed after the connection tracker
          # state to avoid blocking legit traffic
          meta mark != $ALLOWED_COUNTRIES log prefix "Banned country " drop
          # Accept traffic to system ingress
          ip daddr 172.16.255.254 tcp dport { 9080, 9443 } accept
          # Accept traffic for STUN/TURN
          ip daddr 172.16.255.254 udp dport 3478 accept
          ip daddr 172.16.255.254 tcp dport 5349 accept
          log prefix "Public unknown traffic " drop
        }

        chain internal_traffic {
          accept
        }

        chain container_traffic {
          accept
        }

        chain output_traffic {
          type filter hook output priority 1000;
          accept
        }
      }

- name: Reload nftables
  ansible.builtin.command: nft -f /etc/nftables.conf

- name: Enable nftables on boot
  ansible.builtin.service:
    name: nftables
    state: started
    enabled: true

- name: Install Kea
  ansible.builtin.apt:
    name: isc-dhcp-server
    state: present
    update_cache: true

- name: Configure DHCP server interface
  ansible.builtin.lineinfile:
    path: /etc/default/isc-dhcp-server
    line: INTERFACESv4="{{ internal_interface }}"
    create: true
    regexp: ^INTERFACESv4=

- name: Configure DHCP server
  ansible.builtin.copy:
    content: |
      subnet {{ internal_network }} netmask {{ internal_network_netmask }} {
        range {{ internal_network_dhcp_start }} {{ internal_network_dhcp_end }};
        option subnet-mask {{ internal_network_netmask }};
        option routers {{ internal_gateway }};
        option domain-name-servers 172.16.255.254, 1.1.1.1, 8.8.8.8;
      }
    dest: /etc/dhcp/dhcpd.conf
    mode: "0644"
    backup: true
  notify:
    - Restart DHCP service

- name: Enable DHCP service
  ansible.builtin.service:
    name: isc-dhcp-server
    enabled: true
    state: started

- name: Disable DHCP6 service
  ansible.builtin.service:
    name: isc-dhcp-server6
    enabled: false
    state: stopped

- name: SSH hardening
  ansible.builtin.import_tasks: hardening-ssh.yaml

- name: Dynamic DNS
  ansible.builtin.import_tasks: configure-dyn-dns.yaml
