# Disabled until Bitwarden Secret manager will fix the bug to access
# multiple variables in the same block.
# https://community.bitwarden.com/t/bitwarden-lookup-plugin-for-ansible-causes-panick-errors-and-a-worker-was-found-in-a-dead-state/64579/7
# - name: Check required variables
#   fail:
#     msg: >
#       The variables 'wan_interface', 'pppoe_username', 'pppoe_password', 'internal_interface',
#       'internal_network_cidr', 'internal_gateway', 'internal_network_dhcp_start',
#       'internal_network_dhcp_end' are required.
#   when: >
#     wan_interface == '' or
#     internal_interface == '' or
#     pppoe_username == '' or
#     pppoe_password == '' or
#     internal_network == '' or
#     internal_network_netmask == '' or
#     internal_gateway == '' or
#     internal_network_dhcp_start == '' or
#     internal_network_dhcp_end == ''

- name: Create /etc/systemd/resolved.conf.d directory
  file:
    path: /etc/systemd/resolved.conf.d
    state: directory
    mode: 0755

- name: Disable DNSStubListener
  copy:
    content: |
      [Resolve]
      DNSStubListener=no
    dest: /etc/systemd/resolved.conf.d/noresolved.conf
    mode: 0644
  register: resolved_conf_file

- name: Restart systemd-resolved
  service:
    name: systemd-resolved
    state: restarted
  when: resolved_conf_file.changed

- name: Create VLAN config
  copy:
    content: |
      [connection]
      id=vlan
      type=vlan
      autoconnect=true
      autoconnect-retries=0

      [vlan]
      id=835
      parent={{ wan_interface }}
      flags=1

      [ipv4]
      method=disabled

      [ipv6]
      method=ignore
      addr-gen-mode=default

      [ethernet]

      [proxy]
    dest: /etc/NetworkManager/system-connections/vlan.nmconnection
    mode: 0600

# This workaround is needed because the current release of Bitwarden Secret Manager is bugged and
# two variables cannot be used at the same time.
# https://community.bitwarden.com/t/bitwarden-lookup-plugin-for-ansible-causes-panick-errors-and-a-worker-was-found-in-a-dead-state/64579/7
- set_fact:
    pppoe_username: "{{ pppoe_username }}"

- set_fact:
    pppoe_password: "{{ pppoe_password }}"

- name: Create PPPOE connection config
  copy:
    content: |
      [connection]
      id=pppoe-ftth
      type=pppoe
      interface-name=ftth
      autoconnect=true
      autoconnect-retries=0

      [ipv4]
      method=auto

      [ipv6]
      method=auto
      addr-gen-mode=default

      [ethernet]

      [pppoe]
      parent={{ wan_interface }}.835
      password="{{ pppoe_password }}"
      username="{{ pppoe_username }}"

      [proxy]
    dest: /etc/NetworkManager/system-connections/pppoe.nmconnection
    mode: 0600

# Required for VLAN tagging
- name: Load kernel module 8021q
  modprobe:
    name: 8021q
    state: present

- name: Create /etc/modules-load.d/8021q.conf
  copy:
    content: 8021q
    dest: /etc/modules-load.d/8021q.conf
    mode: 0644

- name: Install iproute2
  apt:
    name: iproute2
    state: present
    update_cache: yes

- name: Install network-manager
  apt:
    name: network-manager
    state: present
    update_cache: yes

- name: Configure Network Manager
  copy:
    content: |
      [main]
      plugins=ifupdown,keyfile
      monitor-connection-files=yes

      [ifupdown]
      managed=false

      [device]
      wifi.scan-rand-mac-address=no
    dest: /etc/NetworkManager/NetworkManager.conf
    mode: 0644
  notify:
    - Restart NetworkManager service

# Enable IP forwarding
- name: Configure routing table
  copy:
    content: |
      net.ipv4.ip_forward=1
    dest: /etc/sysctl.d/20-ip-forward.conf
    mode: 0644

- name: Enable IP forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present

- name: Install nftables
  apt:
    name: nftables
    state: present
    update_cache: yes

- name: Install conntrack
  apt:
    name: conntrack
    state: present
    update_cache: yes

- name: Configure NAT rules with nftables
  blockinfile:
    path: /etc/nftables.conf
    backup: yes
    create: yes
    insertbefore: EOF
    block: |
      # Clean existing table and preserve docker tables
      table ip ftth_nat
      delete table ip ftth_nat

      table ip firewall
      delete table ip firewall

      table ip mss
      delete table ip mss

      # The source IP for masquerading will be automagically infered based on the
      # output interface
      # table ip affects only IPv4
      table ip ftth_nat {
        chain nat_prerouting {
          type nat hook prerouting priority 0; policy accept;
        }

        # for all packets to WAN, after routing,
        # replace source address with primary IP of WAN interface
        chain ftth_postrouting {
          type nat hook postrouting priority 100; policy accept;
          oifname ftth masquerade # ftth is the interface name
        }
      }

      # Since we are using PPPOE, the packet size of TCP must be adjusted
      # Not all client can adjusted the max MTU and TCP MSS, therefore
      # we do it at the router level
      table ip mss {
        chain mss_forward {
          type filter hook forward priority filter; policy accept;
          tcp flags syn tcp option maxseg size set rt mtu
        }
      }

      # Drop all traffic from internet to internal network
      table ip firewall {

        chain dispatcher {
          type filter hook input priority 1000;

          iif lo accept comment "always accept loopback"
          iifname ftth jump public_traffic # ftth is the interface name
          iifname {{ internal_interface}} jump internal_traffic
          iifname podman0 jump container_traffic
          log prefix "Unmatched interface"
          reject
        }

        chain public_traffic {
          ct state {established,related} accept
          ct state invalid log drop
          log prefix "Public unknown traffic" drop
        }

        chain internal_traffic {
          accept
        }

        chain container_traffic {
          accept
        }

        chain output_traffic {
          type filter hook output priority 1000;
          accept
        }
      }

- name: Reload nftables
  command: nft -f /etc/nftables.conf

- name: Enable nftables on boot
  service:
    name: nftables
    state: started
    enabled: yes

- name: Install Kea
  apt:
    name: isc-dhcp-server
    state: present
    update_cache: yes

- name: Configure DHCP server interface
  lineinfile:
    path: /etc/default/isc-dhcp-server
    line: INTERFACESv4="{{ internal_interface }}"
    create: yes
    regexp: "^INTERFACESv4="

- name: Configure DHCP server
  copy:
    content: |
      subnet {{ internal_network }} netmask {{ internal_network_netmask }} {
        range {{ internal_network_dhcp_start }} {{ internal_network_dhcp_end }};
        option subnet-mask {{ internal_network_netmask }};
        option routers {{ internal_gateway }};
        option domain-name-servers 172.16.255.254, 1.1.1.1, 8.8.8.8;
      }
    dest: /etc/dhcp/dhcpd.conf
    mode: 0644
    backup: yes
  notify:
    - Restart DHCP service

- name: Enable DHCP service
  service:
    name: isc-dhcp-server
    enabled: yes
    state: started

- import_tasks: hardening-ssh.yaml